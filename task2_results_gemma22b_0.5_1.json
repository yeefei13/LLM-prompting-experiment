"Here's a breakdown of the time complexities for each code snippet:

**Code A:**  O(n^2) - This is due to nested loops. The outer loop iterates 'size' times, and the inner loop runs from 0 to i.

**Code B:** O(n) - This uses an array to store sums, making it more efficient than code A.

**Code C:** O(n) -  This is a simple sum of all elements in the array.


**Explanation:**
* **O(n^2):** The nested loops in Code A lead to quadratic time complexity (doubling the size of the input array increases the number of operations). 
* **O(n):** Code B and C have linear time complexity, as they iterate through the array once.


Let me know if you'd like a more detailed explanation! "