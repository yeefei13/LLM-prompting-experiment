"The efficiency of the code can be measured by factors such as time complexity, space complexity and how much memory is used. However, in this case we are not considering these aspects because they're highly dependent on specifics like hardware architecture or software environment where it runs (like a desktop application). 

However if you want to measure the efficiency of code for sorting algorithms such as merge-sort which has time complexity O(n log n), then this can be done. Here is how:

1) Time Complexity - The main factor in determining whether an algorithm runs faster or slower than a similar one on average, under suitable assumptions about the input data and hardware environment where it's run (like modern desktop computers).  Merge-sort has O(n log n), but not all sorting algorithms have this property.
2) Space Complexity - This is mainly concerned with memory usage which can be measured by using a profiler tool in the software or under specific conditions on your machine to see how much space it uses up during execution of code (like running multiple instances and observing).  Merge-sort has O(n), but not all sorting algorithms have this property.
3) Hardware - The speed at which hardware can execute instructions, memory access speeds etc., is also a factor in determining the efficiency as well because different machines will perform operations differently due to their specifics (like cache sizes and other factors).  Merge-sort has O(n log n), but not all sorting algorithms have this property.
"