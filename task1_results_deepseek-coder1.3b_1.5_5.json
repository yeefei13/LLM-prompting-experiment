"To solve this mathematical problem using Python as follows would be a good approach (assuming standard order of maths from PEMDAS):  \r
Firstly understand that both 'Scenario 1' and Scenariour '.2 are essentially asking the same thing, so one can use either. But for clarity I will write it twice: once in each scenario below- this is a continuation or expansion of previous content mentioned (if not full version).
\r```python   #First approach follows PEMDAS order  ie Parentheses -> Exponents and Multiplication & Division /Multiplications and Divisions same priority, followed by Addition `+` AND Subtraction. In Python we can handle these operations separately due to the different precedence of Arithmetic Operations\r
import operator   #Importing python built-in 'operator' library which contains all arithemetic operators used in above example such as +,- etc, so that it becomes easier while performing mathematical computation by just providing appropriate character/key.  For Example : \"+\" uses Addition operation and similarly \"-\", \"/\",\"* use respective operator\r
                  #For simplicity we are not using any external modules to solve this math problem for understanding purpose but you can still write your own program based on 'operator' library functions in Python by providing correct operators yourself.  Like so -> op_dict = {\"+\":add,\"-\":subtract, \"*\":multiply , \"/\" : divide} where add is function which take two parameters and return sum or sub from the given numbers.. etc\r
                      #But if not provided in python 'operator' already provide us such functions so we use that.  But If you want to write our own then it must include at least \"+\",\"-\",\"/\" , multiply all operators, where every function accept two arguments (numbers) and return one result - using those inputs of each operator\r
#Define operations like addition & subtraction for easier coding in the following part  [Example:] op_dict = {\"add\":lambda x,y:x+y,\"subtract\": lambda x , y : x-y} ... then 'op' will call function based on input operation name which can be addition or any substring\r
def main():   #The Main Function -> Where Our Calculation begins  because we have been given the problem in a formula format. But to simplify further, We could simply write this Python script where users provide inputs like: console args... then use that solution for your task if you can assume an operator would be firstly input on second command and rest of operations are same as before ie (2 + 3 - 1)\r
if __name__ == \"__main__\":   #This is to prevent calling directly from the file in another Python script by using double underscore methods. In python , when running a program via terminal or cmd, then if this line runs alone it will give an error which points out that these lines can only be run under certain conditions (only on command-line execution).  \r
    main()  #Calling Main function to start our calculation... Here you write code based problem's rules. In above python snippet i have considered the given scenario in such way for easy understanding and hence provided a complete solution.. As per your requirement, one can change it according her needs like following if user input of operator is more complicated then different functions will be applied with these inputs 
\r```python   #Second Approach follows similar concept as first approach but groups the operations on left & right... So in expression above all multiplication and division are from Right side. And Addition/Subtraction only done between pairs so that makes it easy to follow standard order of mathematical expressions according PEMDAS (Parentheses -> Exponents, Multiplication / Division etc.)
```python  \r``  # Third Approach simplifies the expression by performing a grouping operation... But not just doing right and left as we are asked in above examples. Here will add/subtract similar to previous scenarios ... ei: (3 *2 -1) is written here which makes simpler version, where you'll handle parentheses later 
\r```python   # Fourth Approach simply simplifies the expression by grouping operators like addition and subtraction firstly as required for clarity. Then again to follow standard order of mathematical operations: PEMDAS/BODMAS... so in this we are not doing much but adding parentheses based on its requirement
```python   #Finally, Approach uses Python's built-in functionality where you specify operators first and then arguments next followed by the operator (used for simplification) ... For example: solve((3 + 2 * 4 /5 ) -7+16/8*9-(6)) this approach is more clear...\r```python
"