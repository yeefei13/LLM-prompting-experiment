"Sure, here's a brief explanation of the codes as per your provided rankings. I will also provide you with explanations about their time complexities and advantages in terms they have over other approaches (Code 1 vs Code2):

- **The first code** has three parts where `sumArray` calls itself inside for loops, leading to unnecessary computation - we can get rid of it as not doing any calculation anymore. This is called the nested looping principle and might lead your CPU to spend more cycles on these kind of computations in general case if you have complex algorithms involving them (e.g., this particular algorithm). 
- **The second code** utilizes dynamic memory allocation for sumArray(). The programmer allocates a new block inside the function, copies original array data into it and frees up old allocated space later using delete[] sums; in C++ we must always ensure to free our dynamically alocated blocks. 
- **The third code** has simpler version which is easy enough for beginners or more complex scenarios but doesn't reduce the time complexity as each iteration of outer loop adds constant O(1) work, regardless size variable at compile level (O(N)). Thus overall its best case runs faster than others and in worst-case scenario performs similarly. It reduces unnecessary computations done by nested loops while also maintaining efficient memory allocation/deallocation for future iterations using array pointers which can lead to better code efficiency as well if it is repeated frequently with similar sizes (using dynamic mem allocated instead of static arrays).
"